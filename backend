require("dotenv").config();
const express = require("express");
const mongoose = require("mongoose");
const cors = require("cors");

const app = express();
app.use(express.json());
app.use(cors());

// Connect to MongoDB
mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
}).then(() => console.log("MongoDB connected"))
  .catch(err => console.error(err));

// Define Ticket Schema
const ticketSchema = new mongoose.Schema({
  title: String,
  description: String,
  status: { type: String, default: "Open" },
});

const Ticket = mongoose.model("Ticket", ticketSchema);

// Routes
app.get("/api/tickets", async (req, res) => {
  const tickets = await Ticket.find();
  res.json(tickets);
});

app.post("/api/tickets", async (req, res) => {
  const { title, description } = req.body;
  const newTicket = new Ticket({ title, description });
  await newTicket.save();
  res.json(newTicket);
});

app.put("/api/tickets/:id", async (req, res) => {
  const { status } = req.body;
  const updatedTicket = await Ticket.findByIdAndUpdate(req.params.id, { status }, { new: true });
  res.json(updatedTicket);
});

app.delete("/api/tickets/:id", async (req, res) => {
  await Ticket.findByIdAndDelete(req.params.id);
  res.json({ message: "Ticket deleted" });
});

// Start Server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
